from typing import Any, ContextManager, Iterable, Optional, Union

class _StorageBlob:
    def upload_from_string(self, data: Union[str, bytes]): ...
    def download_as_bytes(self) -> bytes: ...
    def download_as_text(self) -> str: ...
    def exists(self) -> bool: ...

class _StorageBucket:
    def blob(self, blob_name: str) -> _StorageBlob: ...
    def get_blob(self, blob_name: str) -> _StorageBlob: ...
    def list_blobs(self) -> Iterable[_StorageBlob]: ...

class _StorageClient:
    def bucket(self, name: str) -> _StorageBucket: ...
    def get_bucket(self, name: str) -> _StorageBucket: ...

class _DatastoreKey:
    def to_legacy_urlsafe(self) -> str: ...

class _DatastoreEntity(dict):
    @staticmethod
    def create(kind: str, ent: dict) -> _DatastoreEntity: ...

class _DatastoreQuery:
    def fetch(self) -> Iterable[_DatastoreEntity]: ...
    def add_filter(self, field: str, op: str, value): ...

class _DatastoreTransaction(ContextManager):
    def __enter__(self) -> _DatastoreTransaction: ...
    def __exit__(self, exc_type, exc_value, traceback): ...

class _DatastoreClient:
    def query(
        self, *, kind: str, namespace: Optional[str] = None
    ) -> _DatastoreQuery: ...
    def key(self, *parts) -> _DatastoreKey: ...
    def get(self, key: _DatastoreKey) -> _DatastoreEntity: ...
    def put(self, entity: _DatastoreEntity): ...
    def delete(self, entity: _DatastoreEntity): ...
    def transaction(self) -> _DatastoreTransaction: ...

class _PublishResult:
    def result(self) -> Any: ...

class _PublisherClient:
    def topic_path(self, project_id: str, topic_name: str) -> str: ...
    def publish(self, topic_name: str, data: bytes) -> _PublishResult: ...

def storage_create_client(namespace=None) -> _StorageClient: ...
def datastore_create_client(namespace=None) -> _DatastoreClient: ...
def datastore_create_entity(*args, **kwargs) -> _DatastoreEntity: ...
def datastore_parse_legacy_key(key) -> _DatastoreKey: ...
def pubsub_create_publisher() -> _PublisherClient: ...
